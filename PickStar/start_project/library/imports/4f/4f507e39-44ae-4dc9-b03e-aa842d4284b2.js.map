{"version":3,"sources":["..\\..\\..\\..\\assets\\scripts/assets\\scripts\\Ground.js"],"names":["cc","Class","extends","Component","properties"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBQ;;AAuBZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AAtFK,CAAT","file":"Ground.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n//import Player from './Player.js'\r\n//var Player = require(\"Player\");\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        // mPlayer: {\r\n        //     default: null,\r\n        //     type: Player//cc.Node,\r\n        // },\r\n        //listener: null,\r\n    },\r\n\r\n    // onTouchBegan:function(touch, event){\r\n    //     var target = event.target;//.getCurrentTarget();\r\n    //     var x=target.convertToNodeSpace(touch.getLocation()).x;\r\n    //    //  var size = cc.director.getWinSize();//获取屏幕大小\r\n    //   //   var x = size.width / 2;      //  x轴／2即为x轴中点\r\n    //      if(/*touch.getLocation()<x*/x<0){\r\n    //          this.mPlayer.accLeft = true;\r\n    //      }else{\r\n    //          this.mPlayer.accRight = true;\r\n    //      }\r\n    //       return true;\r\n    //  },\r\n    //  onTouchMoved:function(touch, event){\r\n    //     //      //获取所监听的node对象（widget）\r\n    //     //  var target = event.getCurrentTarget();\r\n    //     //      var delta = touch.getDelta();\r\n    //     //      target.x += delta.x;\r\n    //     //      target.y += delta.y;\r\n    //     //      //获取当前点击点相对于监听对象的位置坐标\r\n    //     //      var localPos = target.convertToNodeSpace(touch.getLocation());\r\n    //     },\r\n    //     onTouchEnded:function(touch, event){\r\n    //         // var size = cc.director.getWinSize();//获取屏幕大小\r\n    //         // var x = size.width / 2;      //  x轴／2即为x轴中点\r\n    //         var target = event.getCurrentTarget();\r\n    //        var x=target.convertToNodeSpace(touch.getLocation()).x;\r\n    //         if(/*touch.getLocation()<x*/x<0){\r\n    //             this.mPlayer.accLeft = false;\r\n    //         }else{\r\n    //             this.mPlayer.accRight = false;\r\n    //         }\r\n    //     },    \r\n\r\n    // // LIFE-CYCLE CALLBACKS:\r\n\r\n    //  onLoad :function() {\r\n    //   //  this.mPlayer=this.mPlayer.getComponent();\r\n    //   if(!this.game){\r\n    //       console.log(\"fuck\");\r\n    //   }\r\n    //   this.mPlayer=this.game.player.getComponent('Player');\r\n    //     this.listener = cc.EventListener.create({\r\n    //         event:cc.EventListener.TOUCH_ONE_BY_ONE,\r\n    //             swallowTouches:true,\r\n    //             onTouchBegan:this.onTouchBegan,\r\n    //             onTouchMoved:this.onTouchMoved,\r\n    //             onTouchEnded:this.onTouchMoved,\r\n            \r\n    //       });\r\n    //     //注册监听器\r\n    //     //param:widget是此监听器所要监听的cc.Node对象\r\n    //     cc.eventManager.addListener(this.listener, this.node);\r\n    //     //如果需要监听其它的node对象需要clone一个新的监听器对象，用法如下：\r\n    //    // cc.eventManager.addListener(listener.clone(), this.getChildByName(\"another_node\"));\r\n    //  },\r\n\r\n    // start () {\r\n        \r\n    // },\r\n\r\n    // update (dt) {},\r\n});\r\n"]}